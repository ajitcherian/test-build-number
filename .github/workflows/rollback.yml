name: "Final | referenceccdavalidator CD Workflow"

on:
  workflow_dispatch:
    inputs:
      deploy-environment:
        type: choice
        description: 'Choose environment'
        options:
          - choose
          - prod
          - G2QA
          - G2QA2
          - G2QA3
          - G2QA4
          - G2QA5
          - G2QA6
          - G2QA7
          - G2QA8
          - DEV
        required: true
        default: 'nonprod'

      release-version:
        description: 'TAG_NUMBER'
        required: true
        type: string
        default: "referenceccdaservice"
        options:
          - referenceccdavalidator-releases-6.12.2-2023-12-04-080835-02
          - referenceccdavalidator-releases-6.12.2-2023-12-04-080835-03
          - referenceccdavalidator-releases-6.12.2-2023-12-04-080835-04
          - referenceccdavalidator-release-3.4.0.0-2024-02-28-131521-99
          - referenceccdavalidator-master-2024-02-27-131522-101
          - referenceccdavalidator-releases-6.2.1-2023-12-04-080835-01
          - referenceccdavalidator-releases-6.13.4-2023-12-04-080835-589
          - referenceccdavalidator-releases-581
          - referenceccdavalidator-releases-6.14.2-2023-12-04-080835-582
          - referenceccdavalidator-releases-6.14.3-2023-12-04-080835-582

      restart-servergroup:
        type: boolean
        required: true
        default: false

env:
  TAG_NUMBER: "${{ github.event.inputs.release-version }}"
  ENV: "${{ github.event.inputs.deploy-environment }}"
  JFROG_REGISTRY: https://mck.jfrog.io"
  JFROG_REPO_NAME: ontada-ccda" 
  PROJECT_NAME: "referenceccdavalidator"
  CONFIG_FOLDER_PATH: "/usr/local/jboss/override/"
  WORKFLOW_FOLDER_NAME: "tmp/referenceccdavalidator/target"
  JBOSS_WILDFLY_PATH: "/usr/local/jboss/wildfly-26.1.2.Final"
  SERVER_USERNAME: "root"
  SSH_PRIVATE_KEY: ${{ secrets.SSH_KEY }}
  RUNTIME: referenceccdaservice.war


jobs:
  approval:
    name: "Approval Stage for Prod environment"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: "Check and Cancel Job"
        if: contains(github.event.inputs.deploy-environment, 'prod')
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          total_sleep_time=600 # Total sleep time in seconds
          check_interval=15    # Check interval in seconds

          # Calculate the number of iterations needed
          iterations=$((total_sleep_time / check_interval))

          # Loop for the specified number of iterations
          for ((i = 0; i < iterations; i++)); do
            status=$(gh run view ${{ github.run_id }} --json status | jq -r .status)

            if [ "$status" != "waiting" ]; then
              total_sleep_time=300 # New total sleep time in seconds
              # Exit the loop and script
              exit 0
            fi
            sleep $check_interval
          done        
          gh run cancel ${{ github.run_id }}

  deployment:
      name: "Deployment in ${{ github.event.inputs.deploy-environment }} for tag : ${{ github.event.inputs.release-version }}"
      environment: ${{ github.event.inputs.deploy-environment }}
      runs-on: ubuntu-latest
      defaults:
        run:
          shell: bash
      steps:
        - name: Set Variables
          run: |
            input="${{ env.TAG_NUMBER }}"
            if [[ $input =~ ^${{ env.PROJECT_NAME }}-(.*?)-([0-9]{4})-([0-9]{2})-([0-9]{2})-([0-9]{6})-([0-9]+) ]]; then
                BRANCH_NAME=$(echo "${BASH_REMATCH[1]}" | sed 's/\//-/g')
                DEPLOYMENT_NAME=$(echo ${{ env.TAG_NUMBER }})
                releaseNumber=$(echo "${BASH_REMATCH[1]}" | cut -d- -f 2)
                CHECKOUT_TAG=`echo "${TAG_NUMBER}"`
                BUILD_NUMBER=`echo "${TAG_NUMBER}" | awk -F- '{print $NF}'`
                echo "BRANCH_NAME=`echo ${BRANCH_NAME}`" >> $GITHUB_ENV
                echo "CHECKOUT_TAG=`echo ${CHECKOUT_TAG}`" >> $GITHUB_ENV
                echo "JFROG_PATH_WAR=`echo '${BRANCH_NAME}/${releaseNumber}-${BUILD_NUMBER}/${{ env.TAG_NUMBER }}.war'`" >> $GITHUB_ENV
                echo "BUILD_NUMBER=`echo ${BUILD_NUMBER}`" >> $GITHUB_ENV
                echo "releaseNumber=`echo ${releaseNumber}`" >> $GITHUB_ENV
                echo "DEPLOYMENT_NAME=`echo ${DEPLOYMENT_NAME} | sed 's/ /-/g'`" >> $GITHUB_ENV
            else
                echo "JFROG_PATH_WAR=`echo '${{ env.TAG_NUMBER }}.war'`" >> $GITHUB_ENV
                DEPLOYMENT_NAME=$(echo ${{ env.TAG_NUMBER }}-${{ github.run_number }})
                echo "DEPLOYMENT_NAME=`echo ${DEPLOYMENT_NAME}`" >> $GITHUB_ENV
            fi
        - name: Show variables
          run: |
             echo "BRANCH_NAME: ${{ env.BRANCH_NAME }}"
             echo "CHECKOUT_TAG: ${{ env.CHECKOUT_TAG }}"
             echo "JFROG_PATH_WAR: ${{ env.JFROG_PATH_WAR }}"
             echo "BUILD_NUMBER: ${{ env.BUILD_NUMBER }}"
             echo "releaseNumber: ${{ env.releaseNumber }}"  
             echo "DEPLOYMENT_NAME: ${{ env.DEPLOYMENT_NAME }}"
             echo "RUNTIME: ${{ env.RUNTIME }}"
