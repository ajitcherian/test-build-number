name: "APIPORTAL and FHIR SMART SAMPLE WEBAPP CD Workflow"

on:
  workflow_dispatch:
    inputs:
      choose-service:
        type: choice
        description: 'Choose Service'
        options:
          - choose
          - apiportal-service
          - fhir-smart-sample-webapp

      deploy-environment:
        type: choice
        description: 'Choose environment'
        options:
          - choose
          - DEV
          - G2QA
          - G2QA2
          - G2QA3
          - G2QA4
          - G2QA5
          - G2QA6
          - G2QA7
          - G2QA8
          - prod
        required: true
        default: 'G2QA5'

      release-version:
        description: 'TAG_NUMBER'
        required: true
        default: "only copy propertyfile"
        type: choice
        options:
          - only copy propertyfile
          - apiportal-release-3.40.0-2024-04-05-080835-03
          - apiportal-release-3.40.0-2023-09-06-080835-02
          - apiportal-ci-cd-test-2024-03-28-100139-61
          - apiportal-release-3.4.0.0-2024-03-21-082035-177
          - apiportal-release-3.4.0.0-2024-03-21-081113-176
          - apiportal-release-3.4.0.0-2024-03-20-153731-173
          - apiportal-release-3.40.0-2023-09-06-080835-01

      restart-controllers: 
        type: boolean
        required: true
        default: false

      force-copy-property-file:
        type: boolean
        required: true
        default: false

env:
  SERVICE_NAME: "${{ github.event.inputs.choose-service }}"
  TAG_NUMBER: "${{ github.event.inputs.release-version }}"
  ENV: "${{ github.event.inputs.deploy-environment }}"
  JFROG_REGISTRY: "https://mck.jfrog.io"
  JFROG_REPO_NAME: "ontada-api-portal" 
  CONFIG_FOLDER_PATH: "/usr/local/jboss/overrides/"
  ROLLBACK_DIRECTORY: "/usr/local/jboss/rollback" 
  PROJECT_NAME: "apiportal"
  WORKFLOW_FOLDER_NAME: "tmp/apiportal/target"
  JBOSS_WILDFLY_PATH: "/usr/local/jboss/wildfly-26.1.2.Final"
  SERVER_USERNAME: "root"
  SSH_PRIVATE_KEY: ${{ secrets.SSH_KEY }}
  FORCE_PROPERTY_FILE_CHANGE: "${{ github.event.inputs.force-copy-property-file }}"

jobs:
  approval:
    name: "Approval Stage for Prod environment"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: "Check and Cancel Job"
        if: contains(github.event.inputs.deploy-environment, 'prod')
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          total_sleep_time=600 # Total sleep time in seconds
          check_interval=15    # Check interval in seconds

          # Calculate the number of iterations needed
          iterations=$((total_sleep_time / check_interval))

          # Loop for the specified number of iterations
          for ((i = 0; i < iterations; i++)); do
            status=$(gh run view ${{ github.run_id }} --json status | jq -r .status)

            if [ "$status" != "waiting" ]; then
              total_sleep_time=300 # New total sleep time in seconds
              # Exit the loop and script
              exit 0
            fi
            sleep $check_interval
          done        
          gh run cancel ${{ github.run_id }}

  deployment:
      name: "${{ github.event.inputs.choose-service }} Deployment in ${{ github.event.inputs.deploy-environment }} for tag : ${{ github.event.inputs.release-version }}"
      environment: ${{ github.event.inputs.deploy-environment }}
      runs-on: kube-deploy
      defaults:
        run:
          shell: bash
      container:
        image: mck-ontada-sre.jfrog.io/sqlplus/sqlplus:archlinux_base
        options: --user root
        credentials:
            username: ${{ secrets.DEV_PORTAL_JFROG_USERNAME }}
            password: ${{ secrets.DEV_PORTAL_JFROG_API_KEY }}
      steps:
        - name: Set Variables
          run: |
            input="${{ env.TAG_NUMBER }}-${{ env.SERVICE_NAME }}"
            if [[ $input =~ ^${{ env.PROJECT_NAME }}-(.*?)-([0-9]{4})-([0-9]{2})-([0-9]{2})-([0-9]{6})-([0-9]+)-${{ env.SERVICE_NAME }} ]]; then
                BRANCH_NAME=$(echo "${BASH_REMATCH[1]}" | sed 's/\//-/g')
                DEPLOYMENT_NAME=$(echo ${{ env.SERVICE_NAME }}-${BASH_REMATCH[@]:1:6})
                releaseNumber=$(echo "${BASH_REMATCH[1]}" | cut -d- -f 2)
                CHECKOUT_TAG=`echo "${TAG_NUMBER}"`
                BUILD_NUMBER=`echo "${TAG_NUMBER}" | awk -F- '{print $NF}'`
                releaseNumber=`echo "${BRANCH_NAME}" | awk -F'[_/-]' '{print $NF}'`
                echo "releaseNumber=`echo ${releaseNumber}`" >> $GITHUB_ENV
                
                if [ "$BRANCH_NAME" = "master" ]; then
                  echo "JFROG_PATH_WAR=`echo '${BRANCH_NAME}/${BRANCH_NAME}-${BUILD_NUMBER}/${DEPLOYMENT_NAME}.war'`" >> $GITHUB_ENV
                else
                  echo "JFROG_PATH_WAR=`echo '${BRANCH_NAME}/${releaseNumber}-${BUILD_NUMBER}/${DEPLOYMENT_NAME}.war'`" >> $GITHUB_ENV
                fi
                echo "BRANCH_NAME=`echo ${BRANCH_NAME}`" >> $GITHUB_ENV
                echo "CHECKOUT_TAG=`echo ${CHECKOUT_TAG}`" >> $GITHUB_ENV
                echo "BUILD_NUMBER=`echo ${BUILD_NUMBER}`" >> $GITHUB_ENV
                echo "releaseNumber=`echo ${releaseNumber}`" >> $GITHUB_ENV
                echo "DEPLOYMENT_NAME=`echo ${DEPLOYMENT_NAME} | sed 's/ /-/g'`" >> $GITHUB_ENV
            else
                echo "Invalid input format: $input"
                exit 1;
            fi
            if [[ ${{ env.SERVICE_NAME }} == "apiportal-service" ]]; then
                echo "RUNTIME=`echo apiportal-service.war`" >> $GITHUB_ENV
            fi
            if [[ ${{ env.SERVICE_NAME }} == "fhir-smart-sample-webapp" ]]; then
                echo "RUNTIME=`echo fhir-smart-sample-webapp.war`" >> $GITHUB_ENV
            fi
        - name: Show variables
          run: |
             echo "BRANCH_NAME: ${{ env.BRANCH_NAME }}"
             echo "CHECKOUT_TAG: ${{ env.CHECKOUT_TAG }}"
             echo "JFROG_PATH_WAR: ${{ env.JFROG_PATH_WAR }}"
             echo "BUILD_NUMBER: ${{ env.BUILD_NUMBER }}"
             echo "releaseNumber: ${{ env.releaseNumber }}"  
             echo "DEPLOYMENT_NAME: ${{ env.DEPLOYMENT_NAME }}"
             echo "RUNTIME: ${{ env.RUNTIME }}"

        - name: Checkout Repository
          uses: actions/checkout@v2
        - name: Copy Artifact to Master Server
          if: ( github.event.inputs.restart-controllers != 'true' && env.TAG_NUMBER != 'only copy propertyfile' )
          run: echo "copy art to master"
            
        - name: Make Secret File
          run: |
            echo "username=`echo ${{ secrets.APP_USERNAME }}`" >> secrets-temp.properties
            echo "password=`echo ${{ secrets.APP_PASSWORD }}`" >> secrets-temp.properties
            echo "oauth2.clientId=`echo ${{ secrets.OAUTH2_CLIENT_ID }}`" >> secrets-temp.properties
            echo "oauth2.clientSecret=`echo ${{ secrets.OAUTH2_CLIENT_SECRET }}`" >> secrets-temp.properties 
            echo "ui.clientId=`echo ${{ secrets.UI_CLIENT_ID }}`" >> secrets-temp.properties
            echo "oauth2.username=`echo ${{ secrets.OAUTH2_USERNAME }}`" >> secrets-temp.properties
            echo "oauth2.password=`echo ${{ secrets.OAUTH2_PASSWORD }}`" >> secrets-temp.properties
            echo "OAUTH_USER_NAME=`echo ${{ secrets.OAUTH_USER_NAME }}`" >> secrets-temp.properties
            echo "OAUTH_PASSWORD=`echo ${{ secrets.OAUTH_PASSWORD }}`" >> secrets-temp.properties 
            echo "reCaptcha.verification.secret=`echo ${{ secrets.CAPTCHA_SECRET }}`" >> secrets-temp.properties
            echo "reCaptcha.verification.siteKey=`echo ${{ secrets.CAPTCHA_SITE_KEY }}`" >> secrets-temp.properties
            echo "oauth2.sandbox.clientId=`echo ${{ secrets.OAUTH2_SANDBOX_CLIENTID }}`" >> secrets-temp.properties
            echo "oauth2.sandbox.clientSecret=`echo ${{ secrets.OAUTH2_SANDBOX_CLIENTSECRET }}`" >> secrets-temp.properties
            echo "oauth2.sandbox.username=`echo ${{ secrets.OAUTH2_SANDBOX_USERNAME }}`" >> secrets-temp.properties
            echo "oauth2.sandbox.password=`echo ${{ secrets.OAUTH2_SANDBOX_PASSWORD }}`" >> secrets-temp.properties
            echo "apiPortal.sandbox.developer.email=`echo ${{ secrets.APIPORTAL_SANDBOX_DEVELOPER_EMAIL }}`" >> secrets-temp.properties
            echo "apiPortal.sandbox.developer.password=`echo ${{ secrets.APIPORTAL_SANDBOX_DEVELOPER_PASSWORD }}`" >> secrets-temp.properties
            echo "List of secrets getting empty value:"
            awk -F'=' '{if ($2=="") print $1}' secrets-temp.properties
            echo "Removing blank secrets"
            awk -F'=' '$2!=""' secrets-temp.properties  > secrets.properties
        - name: Set Application Properties File
          if: ( github.event.inputs.restart-controllers != 'true' )
          run: |
            # Remove blank secret variables.
            echo ${{ vars.APPLICATION_PROPERTIES }} >> ./${{ vars.CONFIG_FILE_NAME }}
            cat secrets.properties >> ./${{ vars.CONFIG_FILE_NAME }}
            #pacman -S --noconfirm diffutils
            sed '/^\s*$/d; /^#/d' Application.Properties | sort  > filtered_server.prop
            sed '/^\s*$/d; /^#/d' ${{ vars.CONFIG_FILE_NAME }} | sort > filtered_github.prop

            diff -u filtered_server.prop filtered_github.prop > property_diff.patch || true
            if [[ -s property_diff.patch ]]; then
                echo "Warning: Manual changes detected in the property file. Skipping deployment."
                echo "Showing difference and stop the workflow."
                cat property_diff.patch
                echo "############Above are changes after compare##############"
                if [[ "${{ env.FORCE_PROPERTY_FILE_CHANGE }}" == "true" ]]; then
                  echo "execute with force deployment"
                else
                  exit 1
                fi
            else
                echo "No changes detected in the property file. Proceeding with deployment."
            fi
        - name: Set Credentials for Jfrog Artifact
          if: ${{ env.TAG_NUMBER != 'only copy propertyfile' }}
          uses: jfrog/setup-jfrog-cli@v3
          env:
            JF_URL: ${{ env.JFROG_REGISTRY }}
            JF_USER: ${{ secrets.DEV_PORTAL_JFROG_USERNAME }}
            JF_PASSWORD: ${{ secrets.DEV_PORTAL_JFROG_API_KEY }}

        - name: Download Artifact
          if: ( github.event.inputs.restart-controllers != 'true' && env.TAG_NUMBER != 'only copy propertyfile' )
          run: |
            echo "#Download artifact and move to target folder and upload to wildfly"

        - name: PROD | Stop All Host Controllers
          if: ( github.event.inputs.restart-controllers == 'true' && env.TAG_NUMBER != 'only copy propertyfile')
          run: echo "Stop all host"

        - name: PROD | Start Master Host Controllers
          if: ( github.event.inputs.restart-controllers == 'true' && env.TAG_NUMBER != 'only copy propertyfile')
          run: echo "start all host master"

        - name: PROD | Start Server Groups
          if: ( github.event.inputs.restart-controllers == 'true' && env.TAG_NUMBER != 'only copy propertyfile')
          run: echo "start server group"
       
        - name: Copy Application Property files
          if: ( github.event.inputs.restart-controllers != 'true' )
          run: echo "Copy Application Property files"

        - name: Undeploy and Deploy For Production
          if: ( env.TAG_NUMBER != 'only copy propertyfile' && github.event.inputs.restart-controllers != 'true')
          run: echo "deploy"


        - name: Restart Server Group
          #Remove below env condition once systemctl is setup on production
          if: ( github.event.inputs.restart-controllers != 'true')
          run: echo "restart server group"

