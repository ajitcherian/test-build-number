name: "POC | Final Deployment Workflow"

on:      
  workflow_dispatch:
    inputs:
      release-version:
        description: 'TAG_NUMBER'
        required: true
        type: choice
        default: "lynx-releases-6.2.2-2023-12-04-080835-02"
        options:
          - lynx-releases-6.2.2-2023-12-04-080835-02
          - lynx-releases-6.2.1-2023-12-04-080835-01
          - lynx-releases-6.13.4-2023-12-04-080835-589
          - lynx-releases-1.1.0-2023-12-04-080835-581
          - lynx-releases-1.1.3-2023-12-04-080835-582
          - lynx-releases-1.1.3-2023-12-04-080835-582

      database-update:
        description: 'Select the environment if a database update needed. If not then select "false".'
        type: choice
        required: false
        default: 'false'
        options:
          - 'false'
          - LMDA
          - LMDB
          - LMDC
          - LYNXDEV
          - LMPERF
          - LYNXQA1
          - LYNXALPHA
          - LYNXPERF
          - LYNXPREVIEW
          - LYNXQA

      deploy-environment:
        type: choice
        description: 'Choose environment'
        options:
          - qa
          - alpha
          - perf
          - preview
          - prod
        required: true
        default: 'qa'

      restart-controllers:
        type: boolean
        required: true
        default: false

      only-copy-property-file:
        type: choice
        required: true
        options:
          - 'false'
          - 'true'

env:
  TAG_NUMBER: "${{ github.event.inputs.release-version }}"
  DATABASE_UPDATE: "${{ github.event.inputs.database-update }}"
  ENV: "${{ github.event.inputs.deploy-environment }}"
  CONFIG_FILE_NAME: ${{ vars.CONFIG_FILE_NAME }}
  JSON_VARIABLE: "${{ secrets[github.event.inputs['database-update']] }}"
  ROLLBACK_DIRECTORY: "/home/webadmin/rollback"
  PROJECT_NAME: "lynx"
  PROPERTY_FILE_CHANGE: "${{ github.event.inputs.only-copy-property-file }}"
  WORKFLOW_FOLDER_NAME: "lynx-web/target"
defaults:
  run:
    working-directory: ./app 

jobs:
    prerequisite:
      name: "Preparing Deployment in ${{ github.event.inputs.deploy-environment }} for tag : ${{ github.event.inputs.release-version }}"
      environment: ${{ github.event.inputs.deploy-environment }}
      runs-on: ubuntu-la***REMOVED***
      defaults:
        run:
          shell: bash 
      container:
        image: mehulsharma20/sqlplus:v7
        options: --user root    
      steps:
        - name: Checkout repository
          uses: actions/checkout@v2

        - name: Set Variables
          run: |
            # If release name has release/FHIR it will modify it to release-FHIR.
            PROJECT_NAME="lynx"
            echo "PROJECT_NAME=`echo ${PROJECT_NAME}`" >> $GITHUB_ENV
            input="${{ env.TAG_NUMBER}}"
            if [[ $input =~ ^$PROJECT_NAME-(.*?)-([0-9]{4})-([0-9]{2})-([0-9]{2})-([0-9]{6})-([0-9]+) ]]; then
              BRANCH_NAME=$(echo "${BASH_REMATCH[1]}" | sed 's/\//-/g')
              echo "BRANCH_NAME=`echo ${BRANCH_NAME}`" >> $GITHUB_ENV 
            else
              echo "Invalid input format: $input"
            fi
            echo $PROJECT_NAME $BRANCH_NAME
        - name: "Make secret file"
          uses: SpicyPizza/create-envfile@v2.0
          with:
            # Add variable name with prefix "envkey_<VARIABLE-NAME>".
            envkey_INTERFACE_USERNAME: ${{ secrets.INTERFACE_USERNAME }}
            envkey_INTERFACE_PASS: ${{ secrets.INTERFACE_PASS }}
            envkey_ATTP_CLIENT_ID: ${{ secrets.ATTP_CLIENT_ID }}
            envkey_ATTP_CLIENT_SECRET: ${{ secrets.ATTP_CLIENT_SECRET }}
            envkey_ORDER_SERVICE_SENDER_ID: ${{ secrets.ORDER_SERVICE_SENDER_ID }}
            envkey_ORDER_SERVICE_SENDER_SECRET: ${{ secrets.ORDER_SERVICE_SENDER_SECRET }}
            envkey_ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
            #Not common
            envkey_SALES_ORDER_API_KEY: ${{ secrets.SALES_ORDER_API_KEY }}
            # Below are variable for the module
            file_name: secrets.properties
            fail_on_empty: false
            sort_keys: false

        #Generate and copy property file to server
        - name: Set application properties file
          run: |
            mkdir -p ${{ env.WORKFLOW_FOLDER_NAME }}
            echo ${{ vars.APPLICATION_PROPERTIES }} >> ./${{ env.WORKFLOW_FOLDER_NAME }}/${{ env.CONFIG_FILE_NAME }}
            echo `cat secrets.properties` >> ./${{ env.WORKFLOW_FOLDER_NAME }}/${{ env.CONFIG_FILE_NAME }}
            echo "lynx.build.number=`echo ${{ env.TAG_NUMBER }} |  awk -F'[-.]' '{print $NF}'`" >> ./${{ env.WORKFLOW_FOLDER_NAME }}/${{ env.CONFIG_FILE_NAME }}
            ls -lh ${{ env.WORKFLOW_FOLDER_NAME }}

        - name: Set Credentials for Jfrog Artifact
          if: ${{ env.PROPERTY_FILE_CHANGE != 'true' }}
          run: echo "set jfrog credentials"

        - name: Download Artifact
          if: ${{ env.PROPERTY_FILE_CHANGE != 'true' }}
          run: echo "download artifact"

        - name: PROD | Copy Artifact to Master Server
          if: ${{ github.event.inputs.deploy-environment == 'prod' && env.PROPERTY_FILE_CHANGE != 'true' }}
          run: echo "PROD | Copy Artifact to Master Server"

        - name: Copy Application Config files on All Mac***REMOVED***nes
          run: echo "Copy Application Config files on All Mac***REMOVED***nes"
            
        - name: PROD | Putting Deployment WAR on Wildfly Domain
          if: ${{ github.event.inputs.deploy-environment == 'prod' && env.PROPERTY_FILE_CHANGE != 'true' }}
          run: echo "PROD | Putting Deployment WAR on Wildfly Domain"

        - name: Set Java and Maven
          if: ${{ github.event.inputs.deploy-environment != 'prod' && env.PROPERTY_FILE_CHANGE != 'true' }}
          run: |
            echo "install mvn"
            apk add openjdk17-jdk
            apk add maven
            mvn --version

        - name: Undeploy to WildFly
          if: ${{ github.event.inputs.deploy-environment != 'prod' && env.PROPERTY_FILE_CHANGE != 'true' }}
          run: echo "Undeploy on lower env"
  
        - name: Silence Alerts
          if: ${{ github.event.inputs.deploy-environment == 'prod' && env.PROPERTY_FILE_CHANGE != 'true' }}
          run: |
            echo "Silencing Alerts" && ls -la

        - name: PROD | Stop Server Group and All Host Controllers
          if: ( github.event.inputs.deploy-environment == 'prod' && github.event.inputs.database-update != 'false' && env.PROPERTY_FILE_CHANGE != 'true' ) || ( github.event.inputs.restart-controllers == 'true' && github.event.inputs.deploy-environment == 'prod' )
          run: | 
              # Replace commas with spaces to create an array
              IFS=',' read -r -a controllers <<< `echo "${{ vars.CONTROLLER_NAMES }}"`              

              # Loop through the array of controller names
              for controller in "${controllers[@]}"; do
                  echo $controller
              done
              ls -la ${{ env.WORKFLOW_FOLDER_NAME }}
  
        - name: Database Changes
          if: ${{ github.event.inputs.database-update != 'false' }}
          run: |
            echo "Running DB Scripts"

            echo "Project Name is: $PROJECT_NAME"
            input="${{ env.TAG_NUMBER}}"
            if [[ $input =~ ^$PROJECT_NAME-(.*?)-([0-9]{4})-([0-9]{2})-([0-9]{2})-([0-9]{6})-([0-9]+) ]]; then
              BRANCH_NAME="${BASH_REMATCH[1]}"
              echo $BRANCH_NAME
              releaseNumber=$(echo "${BASH_REMATCH[1]}" | cut -d- -f 2)
              echo "releaseNumber=`echo ${releaseNumber}`" >> $GITHUB_ENV  
            else
              echo "TAG Number is not matc***REMOVED***ng correct format so not able to get release number."
              exit 1
            fi
            echo "Relase Number is: $releaseNumber"
            echo "Run Database Update Command"
            curl -LO https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
            mv jq-linux64 jq
            chmod +x jq
            cp jq /usr/bin
            jq --version

          
        - name: Set java and maven
          if: ${{ github.event.inputs.deploy-environment != 'prod' && env.PROPERTY_FILE_CHANGE != 'true' }}
          run: echo "Install mvn"

        - name: Deploy to WildFly
          if: ${{ github.event.inputs.deploy-environment != 'prod' && env.PROPERTY_FILE_CHANGE != 'true' }}
          run: echo "deploy using mvn"

        - name: PROD | Start Master Host Controllers
          if: ( github.event.inputs.deploy-environment == 'prod' && github.event.inputs.database-update != 'false' && env.PROPERTY_FILE_CHANGE != 'true' ) || ( github.event.inputs.restart-controllers == 'true' && github.event.inputs.deploy-environment == 'prod' )  # Need to add one more condition
          run: echo "PROD | Start Master Host Controllers" 
          
        - name: PROD | Start Slave1 Host Controllers
          if: ( github.event.inputs.deploy-environment == 'prod' && github.event.inputs.database-update != 'false' && env.PROPERTY_FILE_CHANGE != 'true' ) || ( github.event.inputs.restart-controllers == 'true' && github.event.inputs.deploy-environment == 'prod' )  # Need to add one more condition
          run: echo "PROD | Start Slave1 Host Controllers"

        - name: PROD | Undeploy & Deploy Deployment File and Start Server Groups
          if: ${{ github.event.inputs.deploy-environment == 'prod' && env.PROPERTY_FILE_CHANGE != 'true' }}
          run: echo "PROD | Undeploy & Deploy Deployment File and Start Server Groups"
          
        - name: PROD | Storing Property file for Rollback
          if: ${{ github.event.inputs.deploy-environment == 'prod' }}
          run: echo "PROD | Storing Property file for Rollback"

        - name: Microsoft Teams Notification
          run: echo "team notification"
